{"version":3,"sources":["componentes/Error.js","componentes/pregunta.js","componentes/Formulario.js","componentes/Gasto.js","componentes/Listado.js","helpers.js","componentes/ControlPresupuesto.js","App.js","reportWebVitals.js","index.js"],"names":["Error","mensaje","Pregunta","guardarPresupuesto","guardarRestante","actualizarPregunta","useState","cantidad","guardarCantidad","error","guardarError","onSubmit","e","preventDefault","isNaN","type","className","placeholder","onChange","parseInt","target","value","Formulario","guardarGasto","guardarCrearGasto","nombre","guardarNombre","trim","gasto","id","shortid","generate","console","log","Gasto","Listado","gastos","map","revisarPresupuesto","presupuesto","restante","ControlPresupuesto","App","mostrarpregunta","guardarGastos","crearGasto","useEffect","presupuestoRestante","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b7b32c13.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Error = ({mensaje} ) => {\r\n\r\n    <p className= \"alert alert-danger error\">{mensaje}</p>\r\n\r\n\r\n}\r\n\r\nError.propTypes = {\r\n    mensaje: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Error;","import React, { useState } from 'react';\r\nimport Error from \"./Error\"\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Pregunta = ({ guardarPresupuesto, guardarRestante, actualizarPregunta }) => {\r\n\r\n    //definir el state\r\n    const [cantidad, guardarCantidad] = useState(0);\r\n\r\n    //definir state para la validación\r\n    const [error, guardarError] = useState(false); // es falsa para indicar que no hay error al inicio\r\n\r\n    //Función que lee el presupuesto. Como necesitamos acceder los valores, le pasamos e para tener acceso a e.target.value\r\n    // y e.target.name también.\r\n    const definirpresupuesto = e => {\r\n        //console.log(e.target.value); de esta manera puede comprobar si el valor numerico es tomado como string o como numero\r\n        guardarCantidad(parseInt(e.target.value, 10)) // con el parseInt() pasa a valores enteros lo que se le pase como argumento entre parentesis\r\n\r\n    }\r\n/*Cuando en consola los números se muestran en color negro quiere decir que ese número en realidad es de tipo string,\r\ny cuando el número esta en color azul quiere decir que es de tipo entero*/\r\n\r\n    //Submit para definir el presupuesto\r\n    const agregarPresupuesto = e => {\r\n        e.preventDefault(); //Agregamos el preventDefault para que no lo envie el query string en la parte superior y tampoco recargue la página\r\n\r\n        //Validar\r\n        if (cantidad < 1 || isNaN( cantidad )) {\r\n            guardarError(true);\r\n            return;\r\n        }\r\n\r\n        //validación aprobada\r\n        guardarError(false);\r\n        guardarPresupuesto(cantidad);\r\n        guardarRestante(cantidad);\r\n        actualizarPregunta(false);\r\n\r\n    }\r\n\r\n    //Hola probando si anda el repositorio\r\n\r\n    return (\r\n        <>\r\n            <h2>Colaca tu presupuesto</h2>\r\n            {error ? <Error mensaje=\"El Presupuesto es Incorrecto\" />   : null}\r\n            <form\r\n                onSubmit = {agregarPresupuesto}\r\n            >\r\n            <input\r\n                type= \"number\"\r\n                className= \"u-full-width\"\r\n                placeholder= \"coloca tu presupuesto\"\r\n                onChange={definirpresupuesto}\r\n            />\r\n{/*El \"u-full-width\" lo que hace es que el elemento tome todo el espacio que hay disponible, esto viene de la estructura esqueleton (buscar)  */}\r\n            <input\r\n                type= \"submit\"\r\n                className= \"button-primary u-full-width\"\r\n                value= \"Definir Presupuesto\"\r\n            />\r\n            </form>\r\n\r\n\r\n\r\n        </>\r\n\r\n\r\n    )\r\n\r\n\r\n}\r\n\r\nPregunta.propTypes = {\r\n    guardarPresupuesto: PropTypes.func.isRequired,\r\n    guardarRestante: PropTypes.func.isRequired,\r\n    actualizarPregunta: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Pregunta;","import React, { useState } from 'react';\r\nimport Error from './Error';\r\nimport shortid from 'shortid';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nconst Formulario = ({guardarGasto, guardarCrearGasto}) => {\r\n\r\n    const [nombre, guardarNombre] = useState('');\r\n    const [cantidad, guardarCantidad] = useState(0);\r\n    const [error, guardarError] = useState(false);\r\n\r\n    //cuando el usuario agrega un gasto\r\n    const agregarGasto = e => {\r\n        e.preventDefault();\r\n\r\n        //validar\r\n        if(cantidad < 1 || isNaN(cantidad) || nombre.trim() === \"\"){\r\n            guardarError(true);\r\n            return;\r\n        }\r\n        guardarError(false);\r\n\r\n        //construir el gasto\r\n        const gasto = {\r\n            nombre,\r\n            cantidad,\r\n            id:shortid.generate()\r\n\r\n        }\r\n\r\n        console.log(gasto);\r\n\r\n        //pasar el gasto al componente principal\r\n        guardarGasto(gasto);\r\n        guardarCrearGasto(true);\r\n\r\n\r\n        //resetear el form\r\n        guardarNombre('');\r\n        guardarCantidad(0);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <form\r\n                onSubmit={agregarGasto}\r\n            >\r\n                <h2>Agrega tus gastos aquí </h2>\r\n\r\n                {error ? <Error mensaje=\"Ambos campos son obligatorios o Presupuesto Icorrecto\"/>  : null}\r\n\r\n                <div className=\"campo\">\r\n                    <label>Nombre Gasto</label>\r\n                    <input\r\n                        type=\"text\"\r\n                        className=\"u-full-width\"\r\n                        placeholder=\"Ej. Transporte\"\r\n                        value={nombre}\r\n                        onChange={e => guardarNombre(e.target.value)}\r\n                    />\r\n                    <label>Cantidad Gasto</label>\r\n                    <input\r\n                        type=\"munber\"\r\n                        className=\"u-full-width\"\r\n                        placeholder=\"Ej. 300\"\r\n                        value={cantidad}\r\n                        onChange={e => guardarCantidad(parseInt(e.target.value))}\r\n                    />\r\n                    <input\r\n                        type=\"submit\"\r\n                        className=\"button-primary u-full-width\"\r\n                        value=\"Agregar Gasto\"\r\n                    />\r\n                </div>\r\n            </form>   \r\n        </>\r\n    );\r\n}\r\n\r\nFormulario.propTypes = {\r\n    guarcarGasto: PropTypes.func.isRequired,\r\n    guardarCrearGasto: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default Formulario;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Gasto = ({gasto}) => {\r\n    return(\r\n        <li className='gastos'>\r\n            <p>\r\n                {gasto.nombre}\r\n\r\n                <span className='gasto'> $ {gasto.cantidad} </span>\r\n            </p>\r\n        </li>\r\n    );\r\n}\r\n\r\nGasto.propTypes = {\r\n    gasto: PropTypes.object.isRequired\r\n}\r\n\r\nexport default Gasto;","import React from 'react';\r\nimport Gasto from './Gasto';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Listado = ({gastos}) => {\r\n\r\n    return(\r\n        <div className='gastos-realizados'>\r\n            <h2>Listado</h2>\r\n            {/*usamos .map porque vamos a iterar en cada uno de los gastos */}\r\n            {gastos.map(gasto => (\r\n                <Gasto \r\n                    key={gasto.id}\r\n                    gasto={gasto}\r\n                />\r\n            ))}\r\n        </div>\r\n\r\n    );\r\n\r\n}\r\n\r\nListado.propTypes = {\r\n    gastos: PropTypes.array.isRequired\r\n}\r\n\r\nexport default Listado;","//este archivo evita que se sobrecarguen los componentes\r\n\r\nexport const revisarPresupuesto = (presupuesto, restante) => {\r\n\r\n    let clase;\r\n\r\n    if( (presupuesto / 4) > restante ) {\r\n        clase = 'alert alert-danger';\r\n    } else if ( (presupuesto / 2) > restante ) {\r\n        clase = 'alert alert-warning';\r\n    } else {\r\n        clase = 'alert alert-success';\r\n    }\r\n\r\n    return clase;\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { revisarPresupuesto } from '../helpers';\r\n\r\nconst ControlPresupuesto = ({presupuesto, restante}) => {\r\n\r\n    return(\r\n        <>\r\n            <div className='alert alert-primary'>\r\n                Presupuesto:$ {presupuesto}\r\n            </div>\r\n            <div className={revisarPresupuesto(presupuesto, restante)}>\r\n                Restante:$ {restante}\r\n            </div>   \r\n        </>\r\n    );\r\n\r\n}\r\n\r\nControlPresupuesto.propTypes = {\r\n    presupuesto: PropTypes.number.isRequired,\r\n    restante: PropTypes.number.isRequired\r\n}\r\n\r\nexport default ControlPresupuesto;","import React, { useState, useEffect } from 'react';\nimport Pregunta from './componentes/pregunta';\nimport Formulario from './componentes/Formulario';\nimport Listado from './componentes/Listado';\nimport ControlPresupuesto from './componentes/ControlPresupuesto';\n\n\nfunction App() {\n\n  //definir el state, ambos state hay que pasarselo a la pregunta para que de esta forma sean usados. En el elemento <Pregunta />, le pasados\n  // como props las propiedades \"gruardarPresupuesto\" con su mismo nombre como parametro de valor entre llaves, y \"guardarRestante\" al igual\n  //al igual manerea que el anterior. Y luego extraemos esas misma propiedades como props para Pregunta.js \n\n  const [presupuesto, guardarPresupuesto] = useState(0);\n  const [restante, guardarRestante] = useState(0);\n  const [mostrarpregunta, actualizarPregunta] = useState(true);\n  const [ gastos, guardarGastos ] = useState([]);\n  const [ gasto, guardarGasto ] = useState({});\n  const [crearGasto, guardarCrearGasto] = useState(false);\n\n\n  //useEffect que actualiza el Restante\n  useEffect(() => {\n    if (crearGasto) {\n      \n      //agrega nuevo presupuesto\n      guardarGastos([\n        ...gastos,\n        gasto\n      ])\n\n      //resta del presupuesto actual\n      const presupuestoRestante = restante - gasto.cantidad;\n      guardarRestante(presupuestoRestante);\n\n\n      //Resetear a false\n      guardarCrearGasto(false);\n\n    }\n\n  }, [gasto, crearGasto, gastos, restante])\n\n\n  return (\n    <>\n      <div className=\"container\">\n        <header>\n          <h1>Gasto Semanal</h1>\n          \n          <div className=\"contenido-principal contenido\">\n            { mostrarpregunta ? \n            \n              <Pregunta \n            \n                guardarPresupuesto={guardarPresupuesto}\n                guardarRestante={guardarRestante}\n                actualizarPregunta={actualizarPregunta}\n            \n              />\n              : \n            \n              \n              <div className=\"row\">\n                <div className=\"one-half column\">\n                  <Formulario \n                    guardarGasto={guardarGasto}\n                    guardarCrearGasto={guardarCrearGasto}\n                  />\n                </div>\n\n                <div className=\"one-half column\">\n                  <Listado \n                    gastos={gastos}                  \n                  />\n\n                  <ControlPresupuesto\n                    presupuesto={presupuesto}\n                    restante={restante}\n                  />\n                </div>\n\n              </div>\n\n            }\n\n            \n          </div>\n\n        </header>\n\n      </div>\n\n\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}